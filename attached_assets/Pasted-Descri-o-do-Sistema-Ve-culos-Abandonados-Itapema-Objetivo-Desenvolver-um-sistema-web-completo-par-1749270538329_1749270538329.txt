Descri√ß√£o do Sistema: Ve√≠culos Abandonados Itapema
Objetivo:
Desenvolver um sistema web completo para cadastro, listagem e gerenciamento de ve√≠culos abandonados em Itapema, com login restrito por matr√≠cula/senha, controle de usu√°rios e backend conectado a um banco de dados PostgreSQL. O sistema ser√° publicado online gratuitamente e de forma permanente, usando Vercel para o frontend e Railway ou Neon para backend e banco.

üß© Tecnologias obrigat√≥rias:
Frontend: React + Vite + TailwindCSS

Backend: Node.js + Express + TypeScript

Banco de Dados: PostgreSQL (usando Drizzle ORM, Prisma ou similar)

Hospedagem:

Frontend: Vercel

Backend: Railway ou Render

Banco: Neon (se n√£o usar o PostgreSQL do Railway)

‚úÖ Funcionalidades que j√° combinamos (implementar caso n√£o existam):
üîê Login:
Login com matr√≠cula (ex: "12345") e senha.

Tipo de usu√°rio:

Administrador (acesso total)

Padr√£o (acesso restrito)

Exibir nome e tipo do usu√°rio ap√≥s login.

üë§ Usu√°rios:
Tabela users com campos:

id, matricula, password, name, type

Inser√ß√£o inicial de 2 usu√°rios:

Admin: 12345 / admin / Jo√£o Silva

Padr√£o: 67890 / user / Maria Santos

üöó Ve√≠culos:
Tabela vehicles com campos:

id, placa, endereco, dataNotificacao, prazoFinal, status, agente

A√ß√µes:

Criar, Editar, Listar

Alterar status: aguardando remo√ß√£o, removido ao p√°tio, removido pelo propriet√°rio

Destacar ve√≠culos fora do prazo (prazoFinal < data atual)

üìä Dashboard:
Contadores:

Total de ve√≠culos

Aguardando remo√ß√£o

Removidos

Fora do prazo

Filtros por status

üåê Exporta√ß√£o:
Ao finalizar, preparar o projeto para:

Frontend:

Deploy em Vercel

Executar npm run build no client

Backend:

Deploy no Railway

Exportar .env com strings de conex√£o PostgreSQL e vari√°veis

‚öôÔ∏è Extras:
Organizar as pastas:

/client (frontend React)

/server (backend Express + DB)

Scripts √∫teis no package.json:

json
Copiar
Editar
"scripts": {
  "dev": "concurrently \"npm run server\" \"npm run client\"",
  "client": "cd client && npm run dev",
  "server": "cd server && npm run dev"
}
Conex√£o PostgreSQL segura via vari√°vel DATABASE_URL

Configurar .env exemplo com:

env
Copiar
Editar
DATABASE_URL=postgresql://user:password@host:port/db
PORT=5000
üìé Instru√ß√µes finais:
‚ÄúImplemente todas as funcionalidades acima, verifique o que j√° existe, complete o que falta e configure tudo para funcionar com PostgreSQL e estar pronto para deploy gratuito. O objetivo √© gerar um ZIP ou projeto final que possa ser publicado imediatamente. Use padr√£o REST nas rotas e organiza√ß√£o limpa do c√≥digo.‚Äù